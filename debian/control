Source: revpimodio2
Section: python
Priority: optional
Maintainer: Philipp Rosenberger <p.rosenberger@kunbus.com>
Build-Depends:
 debhelper-compat (= 12),
 dh-python,
 python3-all,
 python3-setuptools,
 python3-sphinx
X-Python3-Version: >= 3.5
Standards-Version: 4.5.0
Homepage: https://revpimodio.org/en/homepage/
Vcs-Browser: https://github.com/RevolutionPi/revpimodio2
Vcs-Git: https://github.com/RevolutionPi/revpimodio2.git
Rules-Requires-Root: no
Testsuite: autopkgtest-pkg-python

Package: python3-revpimodio2
Architecture: all
Depends: ${python3:Depends}, ${misc:Depends}
Suggests: python-revpimodio2-doc
Description: Python3 programming for RevolutionPi of Kunbus GmbH
 The module provides all devices and IOs from the piCtory configuration in
 Python3. It allows direct access to the values via their assigned name. Read
 and write actions on the process image are managed by the module itself without
 the programmer having to worry about offsets and addresses. For the gateway
 modules such as ModbusTCP or Profinet, own 'inputs' and 'outputs' can be
 defined over a specific address range. These IOs can be accessed directly from
 the values using Python3.

Package: python3-revpimodio2-doc
Architecture: all
Section: doc
Depends: ${sphinxdoc:Depends}, ${misc:Depends}
Description: Python3 programming for RevolutionPi of Kunbus GmbH documentation
 The module provides all devices and IOs from the piCtory configuration in
 Python3. It allows direct access to the values via their assigned name. Read
 and write actions on the process image are managed by the module itself without
 the programmer having to worry about offsets and addresses. For the gateway
 modules such as ModbusTCP or Profinet, own 'inputs' and 'outputs' can be
 defined over a specific address range. These IOs can be accessed directly from
 the values using Python3.
 .
 This is the documentation package.
